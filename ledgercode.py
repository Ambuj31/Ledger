# -*- coding: utf-8 -*-
"""LedgerCode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XN2oAq48WH0u4e08F-qyK5nYH0jU8gAH
"""

!pip install PyPDF2

import pandas
import numpy
import PyPDF2
import csv
from PyPDF2 import PdfReader

def read_pdf_and_save_to_csv(pdf_path, csv_path):
    # Open the PDF file
    with open(pdf_path, 'rb') as pdf_file:
        # Create a PDF reader objectt65
        pdf_reader = PdfReader(pdf_file)

        # Get the number of pages in the PDF
        num_pages = len(pdf_reader.pages)

        # Initialize a CSV writer
        with open(csv_path, 'w', newline='', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)

            # Loop through all pages in the PDF
            for page_num in range(num_pages):
                # Extract text from the current page
                page = pdf_reader.pages[page_num]
                text = page.extract_text()

                # Split the text into lines
                lines = text.split('\n')

                # Write each line to the CSV file
                for line in lines:
                    # You may need to customize the delimiter based on the actual structure of your PDF
                    csv_writer.writerow([line])

if __name__ == "__main__":
    # Replace 'input.pdf' and 'output.csv' with your actual file names
    read_pdf_and_save_to_csv('/content/LEDGER FINAL YEAR_2021-22.pdf', 'output.csv')

import csv
import re

def extract_data_and_write_to_csv(input_csv_path, output_csv_path):
    with open(input_csv_path, 'r', newline='', encoding='utf-8') as csv_file:
        csv_reader = csv.reader(csv_file)

        # Initialize variables to store extracted data
        found_cgpa_section = False
        extracted_data = []

        # Define the regex pattern for the delimiter "...."
        delimiter_pattern = re.compile(r'\.{4,}')

        for row in csv_reader:
            print(row)
            # Check if the row contains the CGPA section pattern
            if re.search(r'TOTAL CREDITS EARNED : \d+ TOTAL GRADE POINTS EARNED : \d+ FINAL CGPA : [\d.]+', ' '.join(row)):
                found_cgpa_section = True
                print(found_cgpa_section)
                continue

            # Check if the row contains the delimiter "...." using the regex pattern
            if delimiter_pattern.search(' '.join(row)):
                # If CGPA section was found, append the extracted data to the result
                if found_cgpa_section:
                    break  # Exit the loop after finding the next delimiter
                else:
                    continue  # Skip rows until CGPA section is found

            # Append the row to the extracted data if CGPA section has been found
            if found_cgpa_section:
              extracted_data.append([row[0]]) # Store only in the A column
              print(extracted_data)

    # Write the extracted data to a new CSV file
    with open(output_csv_path, 'w', newline='', encoding='utf-8') as output_csv:
        csv_writer = csv.writer(output_csv)
        csv_writer.writerows(extracted_data)

if __name__ == "__main__":
    # Replace 'input.csv' and 'output.csv' with your actual file names
    input_csv_path = '/content/input_ledger.csv'
    output_csv_path = 'output.csv'

    # Extract data and write to a new CSV file
    extract_data_and_write_to_csv(input_csv_path, output_csv_path)

"""##NEW"""

##PERFECT SOLUTION AFTER SOOOO LONGGGGGGGG NOW UPDATE THIS CODE ONLY
import csv
import re

def parse_student_data(data):
    """
    Parses individual student data to extract courses and CGPA information.
    """
    # Regular expressions to identify lines and extract relevant parts
    course_regex = re.compile(r'([A-Z]+\d+[A-Z]?)\s+([A-Z\s-]+)\s+(\d+)\s+([A-Z]+)\s+(\d+)')
    cgpa_regex = re.compile(r'TOTAL CREDITS EARNED\s*:\s*(\d+)\s+TOTAL GRADE POINTS EARNED\s*:\s*(\d+)\s+FINAL CGPA\s*:\s*([0-9.]+)')

    courses = []
    cgpa_info = {}

    for line in data:
        # Check for course line
        course_match = course_regex.match(line)
        if course_match:
            course_details = {
                'COURSE_ID': course_match.group(1),
                'Subject_Name': course_match.group(2).strip(),
                'Earned_Credit': course_match.group(3),
                'Earned_Grades': course_match.group(4),
                'Earned_Grade_Points': course_match.group(5),
            }
            courses.append(course_details)
        else:
            # Check for CGPA line
            cgpa_match = cgpa_regex.search(line)
            if cgpa_match:
                cgpa_info = {
                    'Total_Credits_Earned': cgpa_match.group(1),
                    'Total_Grade_Points_Earned': cgpa_match.group(2),
                    'Final_CGPA': cgpa_match.group(3),
                }

    return courses, cgpa_info

def process_csv(csv_path):
    with open(csv_path, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        student_data = []
        current_student_data = []

        for row in reader:
            line = row[0]  # Assuming all data is in the first column
            if '..........' in line:
                if current_student_data:  # End of a student's data section
                    student_data.append(current_student_data)
                    current_student_data = []
            else:
                current_student_data.append(line)

        # Don't forget to add the last student's data
        if current_student_data:
            student_data.append(current_student_data)

    # Now, parse each student's data
    for data in student_data:
        courses, cgpa_info = parse_student_data(data)
        # You can now print, return, or save this data as needed
        print(courses, cgpa_info)

if __name__ == "__main__":
    process_csv('/content/input_ledger.csv')

import csv
import re

def parse_student_data(data):
    """
    Parses individual student data to extract courses and CGPA information.
    """
    course_regex = re.compile(r'([A-Z]+\d+[A-Z]?)\s+([A-Z\s-]+)\s+(\d+)\s+([A-Z]+)\s+(\d+)')
    cgpa_regex = re.compile(r'TOTAL CREDITS EARNED\s*:\s*(\d+)\s+TOTAL GRADE POINTS EARNED\s*:\s*(\d+)\s+FINAL CGPA\s*:\s*([0-9.]+)')

    courses = []
    cgpa_info = {}

    for line in data:
        course_match = course_regex.match(line)
        if course_match:
            course_details = {
                'COURSE_ID': course_match.group(1),
                'Subject_Name': course_match.group(2).strip(),
                'Earned_Credit': course_match.group(3),
                'Earned_Grades': course_match.group(4),
                'Earned_Grade_Points': course_match.group(5),
            }
            courses.append(course_details)
        else:
            cgpa_match = cgpa_regex.search(line)
            if cgpa_match:
                cgpa_info = {
                    'Total_Credits_Earned': cgpa_match.group(1),
                    'Total_Grade_Points_Earned': cgpa_match.group(2),
                    'Final_CGPA': cgpa_match.group(3),
                }

    return courses, cgpa_info

def process_csv(csv_path, output_csv_path):
    with open(csv_path, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        student_data = []
        current_student_data = []

        for row in reader:
            line = row[0]
            if '..........' in line:
                if current_student_data:
                    student_data.append(current_student_data)
                    current_student_data = []
            else:
                current_student_data.append(line)

        if current_student_data:
            student_data.append(current_student_data)

    # Open a new CSV file to write the parsed data
    with open(output_csv_path, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        # Write the header row
        writer.writerow(['Seat_No', 'Name', 'PRN', 'COURSE_ID', 'Subject_Name', 'Earned_Credit', 'Earned_Grades', 'Earned_Grade_Points', 'Total_Credits_Earned', 'Total_Grade_Points_Earned', 'Final_CGPA'])

        for data in student_data:
            seat_no, name, prn = data[0].split()[:3]  # Assuming the first line is always formatted this way
            courses, cgpa_info = parse_student_data(data[1:])  # Skip the first line which contains the student info

            for course in courses:
                writer.writerow([seat_no, name, prn, course['COURSE_ID'], course['Subject_Name'], course['Earned_Credit'], course['Earned_Grades'], course['Earned_Grade_Points'], cgpa_info.get('Total_Credits_Earned', ''), cgpa_info.get('Total_Grade_Points_Earned', ''), cgpa_info.get('Final_CGPA', '')])

if __name__ == "__main__":
    process_csv('/content/input_ledger.csv', 'output_file.csv')

"""##MORE UPDATES ON THE CODE TO GET PEFECT DATA EXTRACTION UPDATING THE REGEX"""

## Now this code give us correct subject data perfect but the tota;_Credits and all ar enot right
import csv
import re

def parse_student_data(data):
    """
    Parses individual student data to extract courses and CGPA information.
    """
    # Updated regex to find all course entries in a line
    course_regex = re.compile(r'([A-Z]+\d+[A-Z]?)\s+([A-Z\s-]+?)\s+(\d+)\s+([A-Z]+)\s+(\d+)')
    cgpa_regex = re.compile(r'TOTAL CREDITS EARNED\s*:\s*(\d+)\s+TOTAL GRADE POINTS EARNED\s*:\s*(\d+)\s+FINAL CGPA\s*:\s*([0-9.]+)')

    courses = []
    cgpa_info = {}

    for line in data:
        # Find all course matches in the line
        course_matches = course_regex.findall(line)
        for match in course_matches:
            course_details = {
                'COURSE_ID': match[0],
                'Subject_Name': match[1].strip(),
                'Earned_Credit': match[2],
                'Earned_Grades': match[3],
                'Earned_Grade_Points': match[4],
            }
            courses.append(course_details)

        cgpa_match = cgpa_regex.search(line)
        if cgpa_match:
            cgpa_info = {
                'Total_Credits_Earned': cgpa_match.group(1),
                'Total_Grade_Points_Earned': cgpa_match.group(2),
                'Final_CGPA': cgpa_match.group(3),
            }

    return courses, cgpa_info


def process_csv(csv_path, output_csv_path):
    with open(csv_path, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        student_data = []
        current_student_data = []

        for row in reader:
            line = row[0]
            if '..........' in line:
                if current_student_data:
                    student_data.append(current_student_data)
                    current_student_data = []
            else:
                current_student_data.append(line)

        if current_student_data:
            student_data.append(current_student_data)

    # Open a new CSV file to write the parsed data
    with open(output_csv_path, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        # Write the header row
        writer.writerow(['Seat_No', 'Name', 'PRN', 'COURSE_ID', 'Subject_Name', 'Earned_Credit', 'Earned_Grades', 'Earned_Grade_Points', 'Total_Credits_Earned', 'Total_Grade_Points_Earned', 'Final_CGPA'])

        for data in student_data:
            seat_no, name, prn = data[0].split()[:3]  # Assuming the first line is always formatted this way
            courses, cgpa_info = parse_student_data(data[1:])  # Skip the first line which contains the student info

            for course in courses:
                writer.writerow([seat_no, name, prn, course['COURSE_ID'], course['Subject_Name'], course['Earned_Credit'], course['Earned_Grades'], course['Earned_Grade_Points'], cgpa_info.get('Total_Credits_Earned', ''), cgpa_info.get('Total_Grade_Points_Earned', ''), cgpa_info.get('Final_CGPA', '')])


if __name__ == "__main__":
    process_csv('/content/input_ledger.csv', 'update_output_file.csv')

#Completly Working SGPA
import csv
import re

def parse_student_data(data):
    """
    Parses individual student data to extract courses and CGPA information.
    """
    course_regex = re.compile(r'([A-Z]+\d+[A-Z]?)\s+([A-Z\s-]+?)\s+(\d+)\s+([A-Z]+)\s+(\d+)')
    cgpa_regex = re.compile(r'TOTAL CREDITS EARNED\s*:\s*(\d+)\s+TOTAL GRADE POINTS EARNED\s*:\s*(\d+)\s+S\.G\.P\.A\.\s*:\s*([0-9.]+)')

    courses = []
    cgpa_info = []

    # Extract course and CGPA data
    for line in data:
        course_matches = course_regex.findall(line)
        for match in course_matches:
            courses.append({
                'COURSE_ID': match[0],
                'Subject_Name': match[1].strip(),
                'Earned_Credit': match[2],
                'Earned_Grades': match[3],
                'Earned_Grade_Points': match[4],
            })

        cgpa_matches = cgpa_regex.findall(line)
        for match in cgpa_matches:
            cgpa_info.append({
                'Total_Credits_Earned': match[0],
                'Total_Grade_Points_Earned': match[1],
                'SGPA': match[2],
            })

    # Apply CGPA info
    for i, course in enumerate(courses):
        # Determine which CGPA set to use based on the course index
        cgpa_index = i // 9  # This will floor divide the index to determine the set
        if cgpa_index < len(cgpa_info):
            course.update(cgpa_info[cgpa_index])

    return courses

def process_csv(input_path, output_path):
    """
    Processes the input CSV to extract and reformat student data, then saves it to a new CSV.
    """
    delimiter_regex = re.compile(r'\.{10,}')  # Matches a series of 10 or more dots as delimiter

    with open(input_path, 'r', newline='', encoding='utf-8') as infile, \
         open(output_path, 'w', newline='', encoding='utf-8') as outfile:

        reader = csv.reader(infile)
        writer = csv.DictWriter(outfile, fieldnames=['COURSE_ID', 'Subject_Name', 'Earned_Credit', 'Earned_Grades', 'Earned_Grade_Points', 'Total_Credits_Earned', 'Total_Grade_Points_Earned', 'SGPA'])
        writer.writeheader()

        student_data = []
        for row in reader:
            data = ''.join(row)
            if delimiter_regex.search(data):  # Checks if the row matches the delimiter pattern
                if student_data:
                    # Parse the collected data for a student
                    courses = parse_student_data(student_data)
                    writer.writerows(courses)
                    student_data = []  # Reset for the next student
            else:
                student_data.append(data)

        # Don't forget the last student's data
        if student_data:
            courses = parse_student_data(student_data)
            writer.writerows(courses)

if __name__ == "__main__":
    process_csv('/content/input_ledger.csv', 'SGPA1_output_file.csv')

# adding Name and PRN in the output as well

# This is done now each and every thing is included
import csv
import re

def parse_student_header(header):
    """
    Parses the student header to extract seat number, name, and PRN.
    """
    # Regex to match the seat number, name, and PRN format
    header_regex = re.compile(r'(\b[A-Za-z]+\d+)\s+([A-Z\s]+)\s+(\d{10})')
    match = header_regex.match(header)
    if match:
        return match.groups()
    return None, None, None

def parse_student_data(header, data):
    """
    Parses individual student data to extract courses, CGPA information, and student header info.
    """
    # Regex to match the seat number, name, and PRN within each data line
    student_info_regex = re.compile(r'(\b[A-Za-z]+\d+)\s+([A-Z\s]+)\s+(\d{10})')
    course_regex = re.compile(r'([A-Z]+\d+[A-Z]?)\s+([A-Z\s-]+?)\s+(\d+)\s+([A-Z]+)\s+(\d+)')
    cgpa_regex = re.compile(r'TOTAL CREDITS EARNED\s*:\s*(\d+)\s+TOTAL GRADE POINTS EARNED\s*:\s*(\d+)\s+S\.G\.P\.A\.\s*:\s*([0-9.]+)')

    # Extract student header info
    seat_no, name, prn = parse_student_header(header)

    courses = []
    cgpa_info = []

    # Extract course and CGPA data
    for line in data:
        student_info_match = student_info_regex.search(line)
        if student_info_match:
            seat_no, name, prn = student_info_match.groups()

        course_matches = course_regex.findall(line)
        for match in course_matches:
            course_info = {
                'Seat_Number': seat_no,
                'Name': name,
                'PRN': prn,
                'COURSE_ID': match[0],
                'Subject_Name': match[1].strip(),
                'Earned_Credit': match[2],
                'Earned_Grades': match[3],
                'Earned_Grade_Points': match[4],
            }
            courses.append(course_info)

        cgpa_matches = cgpa_regex.findall(line)
        for match in cgpa_matches:
            cgpa_info.append({
                'Total_Credits_Earned': match[0],
                'Total_Grade_Points_Earned': match[1],
                'SGPA': match[2],
            })

    # Apply CGPA info
    for i, course in enumerate(courses):
        # Determine which CGPA set to use based on the course index
        cgpa_index = i // 9  # This will floor divide the index to determine the set
        if cgpa_index < len(cgpa_info):
            course.update(cgpa_info[cgpa_index])

    return courses

def process_csv(input_path, output_path):
    """
    Processes the input CSV to extract and reformat student data, then saves it to a new CSV.
    """
    delimiter_regex = re.compile(r'\.{10,}')  # Matches a series of 10 or more dots as delimiter

    with open(input_path, 'r', newline='', encoding='utf-8') as infile, \
         open(output_path, 'w', newline='', encoding='utf-8') as outfile:

        reader = csv.reader(infile)
        writer = csv.DictWriter(outfile, fieldnames=['Seat_Number', 'Name', 'PRN', 'COURSE_ID', 'Subject_Name', 'Earned_Credit', 'Earned_Grades', 'Earned_Grade_Points', 'Total_Credits_Earned', 'Total_Grade_Points_Earned', 'SGPA'])
        writer.writeheader()

        student_data = []
        student_header = None
        for row in reader:
            data = ''.join(row)
            if delimiter_regex.search(data):  # Checks if the row matches the delimiter pattern
                if student_data and student_header:
                    # Parse the collected data for a student
                    courses = parse_student_data(student_header, student_data)
                    writer.writerows(courses)
                    student_data = []  # Reset for the next student
                    student_header = None
            else:
                if student_header is None:
                    student_header = data
                else:
                    student_data.append(data)

        # Don't forget the last student's data
        if student_data and student_header:
            courses = parse_student_data(student_header, student_data)
            writer.writerows(courses)

if __name__ == "__main__":
    process_csv('/content/input_ledger.csv', 'NAME_output_file.csv')

